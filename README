The entry point is ConsoleRoulette at com.gamesys.consoleroulette.application.

I made the following assumptions because it wasn't clear enough for me on the description.

I call "game" every 30 second period that a number is produced.

A player can only make one bet at each game. If he tries to make another bet I just reject it. I haven't played roulette before so it took me some time to decide what to do here. I had the impression that you can make multiple bets but when I searched the internet it still was not clear. I did see some kind of bets that deal with ranges so I am not sure if that was what I was remembering. So I decided to assume one bet per person per game. No take backs.

The bet must be between 0.01 and 100 pounds. (I assume some games have an upper limit)

No new users can be added during the game. The users that can play are the ones loaded from the file.

If the file is empty, the app exits.

I am taking a flexible/tolerant approach to the creation of players from a file. This of course usually it's a decision discussed before. My approach follows the reasoning that this app must try its hardest to run, so when an entry for a player is encountered that is not valid, I print out some warnings but just disregard the entry and continue with the other entries and try to load them. So the end result is that the game will be played but with less players. The user will see the messages and fix the file in the meantime.

The bonus question states that the file entry should have optional "total win" and "total bet" comma separated values which are the amounts player has won and bet in the past. No value should be treated as zero. In that case if there is only two values I will assume it's the username and total win.

If the input for the bet is incorrect I just present a message and continue with the next input. I basically follow the tolerant approach from before, though I think this is more likely to be "accepted", we don't want the game to stop because of an invalid bet. A message again appears so it can be corrected.

I am using "pounds" and "pence" but I think it would be better to use the smallest denomination of the currency you working with and only deal with other denominations in the presentation layer.

This is an issue that was not clear to me. You ask that a bet can be made concurrently with the generation of a number and I can't understand if you mean it literally or just imply that when the number gets generated you are able to still write and submit an input. Also, I am not sure if this to make it simpler or not for us. In my case, since I have one thread for the monitoring of bets (a thread where the input of bets is feasible) and one thread for the game itself (generating the number that won and the evaluation of the results) one can make a bet while the game is running. What I do is that I keep a map of all the bets of each player which is indexed on an integer which act as an id for each game (30s segment). This id is managed by the thread running the game and each 30 seconds I generate a winning number and increase the game id (since generating a number means the current game ended and a new one will start once the evaluation of the bets completes). The bet monitor thread has a reference to the game thread and can access a method to get the value if the id. (I should point out that the id is an AtomicLong and is only modified by the game thread and only run by the bet monitor thread. In an expansion it could be read by multiple threads.) So when a bet is made, the bet monitor gets the game id and checks if the player has made a bet alreadu in which case he rejects it based on my assumption I stated above. If he hasn't then the bet monitor enters another block of code where a bet object is created and then inserted in the bet history map of the player. Of course it could be that by that time the game id has changed but since it is going to be a ew game, then there isn't a problem (programmatically speaking) since the new game also means that the player hasn't made a bet and this is a valid action and what would happen in the case where a change in the id didn't happen (the id has already changed).  However it is not as clear as I would like. And is definetely as clear if one would assume knowledge of a player in which game he is betting on.